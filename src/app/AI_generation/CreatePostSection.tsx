"use client";
import React, { useState, useEffect } from 'react';

// --- Type Definitions ---
interface CardData {
  Icon: React.ComponentType<{ className?: string }>;
  title: string;
  details: string;
}

interface PodcastConfig {
  language: string;
  length: string;
  type: string;
  hostName: string;
  participantName: string;
  topic: string;
  customQuestions: string[];
  autoGenerated: boolean;
}

interface Story {
  name: string;
  duration: string;
  // Added summary as it's used in the API call body
  summary?: string; 
}

interface Podcast {
  id: string;
  title: string;
  duration: string;
  language: string;
  createdAt: string;
  audioUrl?: string;
  type?: string;
}

// FIX: Defined a more specific type for the generated podcast to avoid 'any'
interface GeneratedPodcast {
  script: string;
  title?: string;
  id?: string;
  // Allows for other potential properties without resorting to 'any'
  [key: string]: string | number | boolean | undefined; 
}

// --- Icon Components ---
const CloseIcon = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="18" y1="6" x2="6" y2="18"></line>
    <line x1="6" y1="6" x2="18" y2="18"></line>
  </svg>
);

const PlayIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
    <polygon points="5,3 19,12 5,21"></polygon>
  </svg>
);

const TrashIcon = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M3 6h18" />
    <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6" />
    <path d="M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2" />
    <line x1="10" y1="11" x2="10" y2="17" />
    <line x1="14" y1="11" x2="14" y2="17" />
  </svg>
);

const LoadingSpinner = () => (
  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500"></div>
);

// --- Main Component ---
export default function CreatePostSection({ cardId, onClose, cardData }: { cardId: number; onClose: () => void; cardData: CardData }) {
  const [activeTab, setActiveTab] = useState<string>('create');

  // Podcast-specific states
  const [podcastConfig, setPodcastConfig] = useState<PodcastConfig>({
    language: 'Hindi',
    length: 'medium',
    type: 'audio',
    hostName: 'Priya',
    participantName: 'Arjun',
    topic: '',
    customQuestions: [],
    autoGenerated: true
  });
  
  const [uploadedStories, setUploadedStories] = useState<Story[]>([]);
  const [existingPodcasts, setExistingPodcasts] = useState<Podcast[]>([]);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);
  const [currentStep, setCurrentStep] = useState<number>(0);
  const [generatedPodcast, setGeneratedPodcast] = useState<GeneratedPodcast | null>(null);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [isEditingScript, setIsEditingScript] = useState<boolean>(false);

  useEffect(() => {
    loadUploadedStories();
    loadExistingPodcasts();
  }, []);

  const loadUploadedStories = async () => {
    try {
      const response = await fetch('/api/podcast/get-uploaded-stories');
      const stories: Story[] = await response.json();
      setUploadedStories(stories);
    } catch (err) {
      console.error('No stories found or error loading stories:', err);
      setUploadedStories([]);
    }
  };

  const loadExistingPodcasts = async () => {
    try {
      const response = await fetch('/api/podcast/get-existing-podcasts');
      const podcasts: Podcast[] = await response.json();
      setExistingPodcasts(podcasts);
    } catch (err) {
      console.error('No existing podcasts found:', err);
      setExistingPodcasts([]);
    }
  };
  
  const playExistingAudio = (url: string | undefined) => {
    if (!url) {
      console.warn('⚠️ No audio URL provided');
      return;
    }
    
    try {
      const audio = new Audio(url);
      audio.play().catch(e => console.error('❌ Playback error:', e));
    } catch (err) {
      console.error('❌ Error creating audio:', err);
    }
  };
  
  const deletePodcast = async (id: string) => {
    try {
      const response = await fetch('/api/podcast/delete-podcast', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }),
      });
      if (response.ok) {
        loadExistingPodcasts();
      } else {
        const errorData = await response.json();
        console.error('Failed to delete podcast:', errorData.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error deleting podcast:', error);
    }
  };

  const generatePodcast = async () => {
    setIsProcessing(true);
    setCurrentStep(0);
    try {
      const scriptResponse = await fetch('/api/podcast/generate-podcast-script', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          topic: podcastConfig.topic,
          customQuestions: podcastConfig.customQuestions,
          uploadedStories, // No need to map if API expects the full Story[] object
          length: podcastConfig.length,
          language: podcastConfig.language,
          hostName: podcastConfig.hostName,
          artistName: podcastConfig.participantName,
          autoGenerated: podcastConfig.autoGenerated
        })
      });

      if (!scriptResponse.ok) {
        const error = await scriptResponse.json();
        throw new Error(error.error || 'Failed to generate script');
      }
      
      const { script } = await scriptResponse.json();
      setCurrentStep(1);
      
      const saveResponse = await fetch('/api/podcast/save-podcast', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          script: script,
          config: podcastConfig,
          timestamp: new Date().toISOString()
        })
      });
      const savedPodcast = await saveResponse.json();
      
      setGeneratedPodcast({
        script,
        ...savedPodcast
      });
      
      setCurrentStep(2);
      await generateAndPlayAudio(script);
      
      setCurrentStep(3);
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setIsProcessing(false);
      setActiveTab('preview');
      
    } catch (error) {
      console.error('Error generating podcast:', error);
      setIsProcessing(false);
      setCurrentStep(-1);
    }
  };

  const addCustomQuestion = (): void => {
    setPodcastConfig(prev => ({
      ...prev,
      customQuestions: [...prev.customQuestions, '']
    }));
  };
  
  const updateCustomQuestion = (index: number, value: string): void => {
    const updatedQuestions = [...podcastConfig.customQuestions];
    updatedQuestions[index] = value;
    setPodcastConfig(prev => ({
      ...prev,
      customQuestions: updatedQuestions
    }));
  };
  
  const removeCustomQuestion = (index: number): void => {
    setPodcastConfig(prev => ({
      ...prev,
      customQuestions: prev.customQuestions.filter((_, i) => i !== index)
    }));
  };
  
  const generateAndPlayAudio = async (
    script: string,
    language: string = podcastConfig.language
  ) => {
    try {
      console.log("🎯 Generating audio for script...");
      const response = await fetch("/api/podcast/generate-podcast-audio", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ script, language }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API failed: ${response.status} ${response.statusText} - ${errorText}`);
      }
      
      const audioBlob = await response.blob();
      console.log("📥 Received audio blob:", audioBlob.size, "bytes", audioBlob.type);
      
      if (audioBlob.size === 0) {
        throw new Error("Received empty audio data");
      }
      
      const base64Audio = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          resolve(reader.result as string);
        };
        reader.onerror = reject;
        reader.readAsDataURL(audioBlob);
      });
      
      setAudioUrl(base64Audio);
      console.log("✅ Base64 audio URL set");
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("❌ Error generating audio:", error);
        alert(`Audio generation failed: ${error.message}`);
      } else {
        console.error("❌ Unknown error generating audio:", error);
        alert("Audio generation failed due to an unknown error.");
      }
    }
  };

  const steps = [
    'Generating script...',
    'Saving podcast...',
    'Generating audio...',
    'Polishing final touches...'
  ];

  const suggestedTopics = ['Youth Engagement with Folk Art', 'History of traditional crafts', 'Tanjore Painting'];
  
  const renderPodcastSection = (): React.ReactElement => (
    <div className="space-y-8">
      {isProcessing && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center">
          <div className="bg-white/10 p-8 rounded-2xl border border-white/20 text-center">
            <h3 className="text-xl font-semibold text-white mb-4">Creating Your Podcast</h3>
            <div className="space-y-4">
              {steps.map((step, index) => (
                <div key={index} className="flex items-center gap-3">
                  {index < currentStep ? (
                    <span className="text-green-400">✓</span>
                  ) : index === currentStep ? (
                    <LoadingSpinner />
                  ) : (
                    <span className="text-gray-500">○</span>
                  )}
                  <p className="text-gray-300">{step}</p>
                </div>
              ))}
            </div>
            <div className="mt-6 w-64 bg-gray-700 rounded-full h-2">
              <div 
                className="bg-gradient-to-r from-purple-600 to-pink-600 h-2 rounded-full animate-pulse"
                style={{width: `${(currentStep / steps.length) * 100}%`}}
              ></div>
            </div>
          </div>
        </div>
      )}
      <div className="grid md:grid-cols-2 gap-8">
        <div className="space-y-6">
          <h4 className="text-2xl font-semibold text-white">Podcast Configuration</h4>
          
          <div className="space-y-2">
            <label className="text-white font-medium">Language & Dialect</label>
            <select
              value={podcastConfig.language}
              onChange={(e) => setPodcastConfig(prev => ({...prev, language: e.target.value}))}
              className="w-full p-3 bg-black/30 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-400"
            >
              <option value="Hindi">Hindi</option>
              <option value="English">English</option>
              <option value="Punjabi">Punjabi</option>
              <option value="Haryanvi">Haryanvi</option>
              <option value="Malayalam">Malayalam</option>
              <option value="Gujarati">Gujarati</option>
              <option value="Marathi">Marathi</option>
              <option value="Odia">Odia</option>
              <option value="Tamil">Tamil</option>
            </select>
          </div>
          <div className="space-y-2">
            <label className="text-white font-medium">Podcast Length</label>
            <div className="grid grid-cols-3 gap-2">
              {['short', 'medium', 'long'].map((length) => (
                <button
                  key={length}
                  onClick={() => setPodcastConfig(prev => ({...prev, length}))}
                  className={`p-3 rounded-lg border transition-all ${
                    podcastConfig.length === length
                      ? 'bg-purple-600 border-purple-400 text-white'
                      : 'bg-black/30 border-white/20 text-gray-300 hover:border-white/40'
                  }`}
                >
                  <div className="text-sm font-medium capitalize">{length}</div>
                  <div className="text-xs">
                    {length === 'short' && '3-5 min'}
                    {length === 'medium' && '8-12 min'}
                    {length === 'long' && '15-20 min'}
                  </div>
                </button>
              ))}
            </div>
          </div>
          <div className="space-y-2">
            <label className="text-white font-medium">Format</label>
            <div className="grid grid-cols-2 gap-2">
              {['audio', 'face'].map((type) => (
                <button
                  key={type}
                  onClick={() => setPodcastConfig(prev => ({...prev, type}))}
                  className={`p-3 rounded-lg border transition-all ${
                    podcastConfig.type === type
                      ? 'bg-purple-600 border-purple-400 text-white'
                      : 'bg-black/30 border-white/20 text-gray-300 hover:border-white/40'
                  }`}
                >
                  <div className="text-sm font-medium capitalize">{type === 'audio' ? 'Audio Only' : 'With Faces'}</div>
                </button>
              ))}
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-white font-medium">Host Name</label>
              <input
                type="text"
                value={podcastConfig.hostName}
                onChange={(e) => setPodcastConfig(prev => ({...prev, hostName: e.target.value}))}
                className="w-full p-3 bg-black/30 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-400"
                placeholder="Enter host name"
              />
            </div>
            <div className="space-y-2">
              <label className="text-white font-medium">Participant Name</label>
              <input
                type="text"
                value={podcastConfig.participantName}
                onChange={(e) => setPodcastConfig(prev => ({...prev, participantName: e.target.value}))}
                className="w-full p-3 bg-black/30 border border-white/20 rounded-lg text-white focus:outline-none focus:border-purple-400"
                placeholder="Enter participant name"
              />
            </div>
          </div>
        </div>
        <div className="space-y-6">
          <h4 className="text-2xl font-semibold text-white">Content Creation</h4>
          
          <div className="flex items-center gap-3">
            <div 
              className="relative flex items-center"
              onClick={() => setPodcastConfig(prev => ({...prev, autoGenerated: !prev.autoGenerated}))}
            >
              <div className={`w-12 h-6 flex items-center ${podcastConfig.autoGenerated ? 'bg-purple-600' : 'bg-gray-600'} rounded-full p-1 cursor-pointer`}>
                <div className={`bg-white w-4 h-4 rounded-full shadow-md transform duration-300 ease-in-out ${podcastConfig.autoGenerated ? 'translate-x-6' : 'translate-x-0'}`}></div>
              </div>
            </div>
            <label className="text-white font-medium">Auto-generate questions from stories</label>
          </div>
          <div className="space-y-2">
            <label className="text-white font-medium">Main Topic/Theme</label>
            <textarea
              value={podcastConfig.topic}
              onChange={(e) => setPodcastConfig(prev => ({...prev, topic: e.target.value}))}
              placeholder="Describe the main theme or topic for your podcast..."
              className="w-full h-24 p-3 bg-black/30 border border-white/20 rounded-lg text-white placeholder-gray-300 resize-none focus:outline-none focus:border-purple-400"
            />
          </div>
          <div className="space-y-2">
            <label className="text-white font-medium">Suggested Topics</label>
            <div className="flex flex-wrap gap-2">
              {suggestedTopics.map((topic, index) => (
                <button
                  key={index}
                  onClick={() => setPodcastConfig(prev => ({...prev, topic}))}
                  className="px-4 py-2 bg-purple-700/50 hover:bg-purple-600 rounded-full text-white text-sm font-medium transition-colors"
                >
                  {topic}
                </button>
              ))}
            </div>
          </div>
          <div className="space-y-2">
            <label className="text-white font-medium">Your Stories ({uploadedStories.length})</label>
            <div className="max-h-32 overflow-y-auto space-y-2">
              {uploadedStories.length > 0 ? (
                uploadedStories.map((story, index) => (
                  <div key={index} className="flex items-center gap-2 p-2 bg-black/20 rounded border border-white/10">
                    <PlayIcon />
                    <span className="text-gray-300 text-sm flex-1">{story.name}</span>
                    <span className="text-xs text-gray-400">{story.duration}</span>
                  </div>
                ))
              ) : (
                <p className="text-gray-400 text-sm italic">No stories uploaded yet. Upload your stories to automatically generate relevant questions.</p>
              )}
            </div>
          </div>
          {!podcastConfig.autoGenerated && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <label className="text-white font-medium">Custom Questions</label>
                <button
                  onClick={addCustomQuestion}
                  className="px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-sm text-white font-medium transition-colors flex items-center gap-2"
                >
                  <span className="text-xl">+</span> Add Question
                </button>
              </div>
              <div className="space-y-3 max-h-40 overflow-y-auto">
                {podcastConfig.customQuestions.map((question, index) => (
                  <div key={index} className="flex items-center gap-3 p-3 bg-black/40 rounded-lg border border-purple-500/20 hover:border-purple-500/40 transition-colors">
                    <span className="text-purple-400 font-medium min-w-[20px]">{index + 1}.</span>
                    <input
                      type="text"
                      value={question}
                      onChange={(e) => updateCustomQuestion(index, e.target.value)}
                      placeholder={`Enter your question...`}
                      className="flex-1 p-0 bg-transparent border-none text-white focus:outline-none"
                    />
                    <button
                      onClick={() => removeCustomQuestion(index)}
                      className="p-1 text-red-400 hover:text-red-300 rounded-full hover:bg-red-900/20 transition-colors"
                    >
                      ×
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      <div className="text-center">
        <button
          onClick={generatePodcast}
          disabled={isProcessing || !podcastConfig.topic.trim()}
          className="px-12 py-4 bg-gradient-to-r from-purple-600 via-purple-700 to-pink-600 hover:from-purple-700 hover:via-purple-800 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg text-white font-semibold transition-all transform hover:scale-105 shadow-lg"
        >
          {isProcessing ? 'Generating...' : 'Create Podcast'}
        </button>
      </div>
      {existingPodcasts.length > 0 && (
        <div className="space-y-4">
          <h4 className="text-xl font-semibold text-white">Previous Drafts</h4>
          <div className="grid gap-4 max-h-64 overflow-y-auto">
            {existingPodcasts.map((podcast, index) => (
              <div key={index} className="flex items-center gap-4 p-4 bg-black/30 border border-white/20 rounded-lg hover:border-purple-400 transition-colors">
                <button
                  onClick={() => playExistingAudio(podcast.audioUrl)}
                  className="p-2 bg-purple-600 hover:bg-purple-700 rounded-full"
                  aria-label={`Play ${podcast.title}`}
                >
                  <PlayIcon />
                </button>
                <div className="flex-1">
                  <h5 className="text-white font-medium">{podcast.title}</h5>
                  <p className="text-gray-300 text-sm">{podcast.duration} • {podcast.language} • {podcast.type || podcastConfig.type}</p>
                  <p className="text-gray-400 text-xs">{new Date(podcast.createdAt).toLocaleDateString()}</p>
                </div>
                <button
                  onClick={() => deletePodcast(podcast.id)}
                  className="p-2 text-red-500 hover:text-red-700"
                  aria-label={`Delete ${podcast.title}`}
                >
                  <TrashIcon />
                </button>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderPreviewSection = (): React.ReactElement | null => (
    generatedPodcast ? (
      <div className="space-y-6">
        <h4 className="text-2xl font-semibold text-white">Generated Podcast Preview</h4>
        <div className="bg-black/30 border border-white/20 rounded-lg p-6">
          <div className="flex items-center gap-4 mb-4">
            <div className="p-4 bg-purple-600 rounded-full">
              <PlayIcon />
            </div>
            <div>
              <h5 className="text-white font-semibold text-lg">{generatedPodcast.title}</h5>
              <p className="text-gray-300">{podcastConfig.hostName} & {podcastConfig.participantName}</p>
              <p className="text-gray-400 text-sm">{podcastConfig.language} • {podcastConfig.length}</p>
            </div>
          </div>
          <div className="mt-4 space-y-2">
            <h6 className="text-white font-medium">Generated Script:</h6>
            {!isEditingScript ? (
              <>
                <div className="h-96 max-h-96 w-full overflow-y-auto p-4 bg-black/20 rounded text-gray-300 text-sm whitespace-pre-line">
                  {generatedPodcast.script}
                </div>
                <button
                  onClick={() => setIsEditingScript(true)}
                  className="mt-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white font-medium transition-all"
                >
                  Edit Script
                </button>
              </>
            ) : (
              <>
                <textarea
                  value={generatedPodcast.script}
                  onChange={(e) => setGeneratedPodcast(prev => prev ? {...prev, script: e.target.value} : null)}
                  className="h-96 w-full overflow-y-auto p-4 bg-black/20 rounded text-gray-300 text-sm whitespace-pre-line resize-none"
                />
                <button
                  onClick={async () => {
                    setIsEditingScript(false);
                    if (generatedPodcast?.script) {
                      await generateAndPlayAudio(generatedPodcast.script, podcastConfig.language);
                    }
                  }}
                  className="mt-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg text-white font-medium transition-all"
                >
                  Save Changes
                </button>
              </>
            )}
          </div>
          <div className="mt-4 space-y-2">
            <h6 className="text-white font-medium">Listen to Your Podcast:</h6>
            {audioUrl && (
              <div className="mt-4">
                <audio
                  controls
                  src={audioUrl}
                  onError={(e) => console.error('Audio element error:', e.currentTarget.error)}
                  className="w-full"
                >
                  Your browser does not support the audio element.
                </audio>
              </div>
            )}
          </div>
        </div>
      </div>
    ) : null
  );

  const renderSocialMediaSection = () => (
    <div className="space-y-6">
      <div className="grid md:grid-cols-3 gap-4">
        {['Instagram Post', 'Facebook Post', 'Twitter Thread'].map((template, idx) => (
          <div
            key={idx}
            className={`p-4 rounded-lg border-2 cursor-pointer transition-all border-white/20 bg-black/30 hover:border-white/30`}
          >
            <h5 className="font-semibold text-white mb-2">{template}</h5>
            <div className="h-24 bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded"></div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderPhotographySection = () => (
    <div className="space-y-6">
      <div className="grid md:grid-cols-2 gap-6">
        <div className="space-y-4">
          <h4 className="text-xl font-semibold text-white">Live Camera Feed</h4>
          <div className="aspect-video bg-black/30 rounded-lg border border-white/20 flex items-center justify-center">
            <p className="text-gray-300">Camera feed would appear here</p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderCreatePostSection = () => (
    <div className="space-y-6">
      <div className="grid md:grid-cols-3 gap-4 mb-6">
        {['Business Card', 'Flyer', 'Banner'].map((template, idx) => (
          <div
            key={idx}
            className="p-4 bg-black/30 border border-white/20 rounded-lg hover:border-purple-400 cursor-pointer transition-all"
          >
            <h5 className="font-semibold text-white mb-2">{template}</h5>
            <div className="h-32 bg-gradient-to-br from-purple-900/30 to-pink-900/30 rounded"></div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderContent = () => {
    switch (cardId) {
      case 1:
        return activeTab === 'create' ? renderPodcastSection() : renderPreviewSection();
      case 2:
        return renderSocialMediaSection();
      case 3:
        return renderPhotographySection();
      case 4:
        return renderCreatePostSection();
      default:
        return <div>Content not found</div>;
    }
  };

  const getTabs = () => {
    if (cardId === 1) {
      return generatedPodcast
        ? ['create', 'preview', 'export']
        : ['create', 'export'];
    }
    return ['create', 'export'];
  };

  return (
    <div className="min-h-screen p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <div className="flex items-center gap-4">
            {React.createElement(cardData.Icon, { className: "w-8 h-8 text-purple-300" })}
            <h2 className="text-3xl font-bold text-white">{cardData.title}</h2>
          </div>
          <button
            onClick={onClose}
            className="p-2 bg-white/10 hover:bg-white/20 rounded-full transition-colors"
          >
            <CloseIcon />
          </button>
        </div>
        <p className="text-lg text-gray-200 mb-8 max-w-3xl">
          {cardData.details}
        </p>
        <div className="flex gap-4 mb-8">
          {getTabs().map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-6 py-3 rounded-lg font-semibold transition-all capitalize ${
                activeTab === tab
                  ? 'bg-gradient-to-r from-purple-600 via-purple-700 to-pink-600 text-white shadow-lg'
                  : 'bg-white/10 text-gray-200 hover:bg-white/20'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>
        <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-8 border border-white/20">
          {renderContent()}
        </div>
        <div className="flex justify-center gap-4 mt-8">
          <button
            onClick={() => {
              if (onClose) onClose();
              loadExistingPodcasts();
            }}
            className="px-8 py-3 bg-gradient-to-r from-purple-600 via-purple-700 to-pink-600 hover:from-purple-700 hover:via-purple-800 hover:to-pink-700 rounded-lg text-white font-semibold transition-all transform hover:scale-105 shadow-lg"
          >
            Save Progress
          </button>
        </div>
      </div>
    </div>
  );
}