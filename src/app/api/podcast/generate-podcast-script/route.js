// src/app/api/podcast/generate-podcast-script/route.js
import { NextResponse } from 'next/server';

// Get your Gemini API key from Google AI Studio and add it to a .env.local file
const GEMINI_API_KEY = "AIzaSyDZ5S69ygJDM1eJFxvV6AqCEUtl9Uqryiw";

export async function POST(request) {
  // 1. Basic check for the API key
  if (!GEMINI_API_KEY) {
    console.error('üí• Missing GEMINI_API_KEY environment variable.');
    return NextResponse.json(
      { error: 'Server configuration error: Missing API key.' },
      { status: 500 }
    );
  }

  try {
    const { topic, customQuestions, uploadedStories, length, language, hostName, artistName, autoGenerated } = await request.json();
    console.log('üîç Request received with data:', {
      topic,
      length,
      language,
      hostName,
      artistName,
      autoGenerated,
      customQuestionsCount: customQuestions?.length || 0,
      uploadedStoriesCount: uploadedStories?.length || 0
    });

    // 2. The prompt construction remains exactly the same. It's excellent.
    let durationGuide = '';
    if (length === 'short') durationGuide = 'Keep the conversation concise, around 20-30 seconds of content.';
    if (length === 'medium') durationGuide = 'Create a moderate length conversation, around 8-12 minutes of content.';
    if (length === 'long') durationGuide = 'Develop a comprehensive conversation, around 15-20 minutes of content.';

    let prompt = `Generate an engaging podcast script in ${language} between ${hostName} (host) and ${artistName} (traditional artist/craftsperson).

${durationGuide}

Main Topic: ${topic}

${uploadedStories.length > 0 ? `Context from uploaded stories: ${uploadedStories.map(story => `- ${story.name}: ${story.summary || 'Audio story about traditional crafts'}`).join('\n')}` : ''}

${autoGenerated ?
'Generate thoughtful questions automatically based on the topic and any available stories. Focus on the artist\'s journey, techniques, cultural significance, and personal experiences.' :
`Custom questions to explore: ${customQuestions.join('\n')}`}

Create a natural, warm conversation that includes:
- Welcoming introduction by ${hostName}
- Personal introduction by ${artistName}
- Deep dive into their craft and traditions
- Stories about learning the art form
- Cultural significance and heritage
- Challenges and rewards of traditional arts
- Advice for aspiring artists
- Warm conclusion

Guidelines:
- Use authentic ${language === 'Hindi' ? 'Hindi with some Haryanvi dialect expressions' : language} dialogue
- Include cultural references and traditional terms
- Make it conversational and engaging
- Show respect for traditional arts
- Include emotional moments and personal stories
- Use clear speaker labels in plain text only
- Do NOT use any markdown formatting like **bold**, *italics*, or headers
- Ensure speakers alternate naturally for a podcast-like flow

Strict Format - Use exactly this structure for every line:
${hostName}: [dialogue]
${artistName}: [dialogue]

Begin the script now:`;

    // 3. The request body is formatted for the Gemini API.
    const requestBody = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: 0.7,
        topP: 0.9,
        maxOutputTokens: 2048, // Note: The parameter name is different from Perplexity's 'max_tokens'
      }
    };

    console.log('üöÄ Making API call to Google Gemini with model: gemini-1.5-flash-latest');

    // 4. The API endpoint and headers are updated for Gemini.
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

    console.log('üì° Response received:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    });
    
    // The error handling logic is mostly the same.
    const responseData = await response.json();
    if (!response.ok) {
      console.error('‚ùå API call failed:', responseData);
      return NextResponse.json(
        { error: 'Google Gemini API error', details: responseData.error?.message || 'Unknown error' },
        { status: 500 }
      );
    }

    // 5. The path to the generated script in the response is different.
    const script = responseData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!script) {
      console.error('‚ùå No script content found in Gemini response:', responseData);
      return NextResponse.json(
        { error: 'No script generated' },
        { status: 500 }
      );
    }

    console.log('üéâ Script generated successfully!');
    return NextResponse.json({ script });

  } catch (error) {
    console.error('üí• Internal Server Error:', error);
    return NextResponse.json(
      { error: 'Failed to generate script', details: error.message },
      { status: 500 }
    );
  }
}